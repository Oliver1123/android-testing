apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("$buildDir/reports")
}

// jacocoTestReport fails if test fails, so another way to get the report:
// 1) run 'gradlew clean testDebugUnitTest connectedDebugAndroidTest --continue' >> to get test reports
// 2) run 'gradlew jacocoTestReport' >> to get jacoco test report
task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // what to exclude from coverage report
    // UI, "noise", generated classes, platform classes, etc.
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*BR*.*',
            '**/*Binding*.*',
            '**/*$Lambda$*.*',
            '**/*Mock*.*',
    ]
    // generated classes
    getClassDirectories().setFrom(fileTree(
            dir: "$buildDir/intermediates/classes/mockDebug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/mockDebug",
            excludes: excludes
    ))

    // sources
    getSourceDirectories().setFrom(files([
            android.sourceSets.main.java.srcDirs,
            "src/main/kotlin"
    ]))
//    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")
    getExecutionData().setFrom(
            fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])
    )
}